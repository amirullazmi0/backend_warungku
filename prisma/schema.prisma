// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id @unique @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  fullName     String         @db.VarChar(200)
  images       String?        @db.VarChar(255)
  password     String         @db.VarChar(255)
  address      String?        @db.Text()
  accessToken  String?        @db.VarChar(255)
  refreshToken String?        @db.VarChar(255)
  lastActive   DateTime?      @db.Timestamp()
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  roles        roles          @relation(fields: [rolesName], references: [name])
  rolesName    String         @db.VarChar(255)
  transactions transactions[]
  wishList     wishList[]
  shoppingCart shoppingCart[]

  @@map("users")
}

model store {
  id           String         @id @unique @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  fullName     String         @db.VarChar(255)
  bio          String?        @db.Text()
  address      String?        @db.Text()
  logo         String?        @db.VarChar()
  password     String         @db.VarChar(255)
  accessToken  String?        @db.VarChar(255)
  refreshToken String?        @db.VarChar(255)
  lastActive   DateTime?      @db.Timestamp()
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  itemStore    itemStore?     @relation(fields: [itemStoreId], references: [id])
  itemStoreId  String?        @db.VarChar(255)
  transactions transactions[]

  @@map("stores")
}

model roles {
  name      String   @id @unique @db.VarChar(255)
  desc      String?  @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]

  @@map("roles")
}

model itemStore {
  id                String              @id @unique @db.VarChar(255)
  name              String              @db.VarChar(255)
  total             Int                 @db.Integer
  price             Int                 @db.Integer
  desc              String?             @db.Text
  images            Json[]              @db.Json
  stores            store[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactions      transactions[]
  wishList          wishList[]
  shoppingCart      shoppingCart[]
  ItemStoreCategory ItemStoreCategory[]

  @@map("itemStores")
}

model category {
  id                String              @id @db.VarChar(255)
  name              String              @unique @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ItemStoreCategory ItemStoreCategory[]
}

model ItemStoreCategory {
  itemStoreId String    @db.VarChar(255)
  categoryId  String    @db.VarChar(255)
  category    category  @relation(fields: [categoryId], references: [id])
  itemStore   itemStore @relation(fields: [itemStoreId], references: [id])

  @@id([itemStoreId, categoryId])
  @@map("itemStoreCategory")
}

model wishList {
  id          String    @id @unique @db.VarChar(255)
  user        user      @relation(fields: [userId], references: [id])
  itemStore   itemStore @relation(fields: [itemStoreId], references: [id])
  itemStoreId String    @db.VarChar(255)
  userId      String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model shoppingCart {
  id          String    @id @unique @db.VarChar(255)
  itemStore   itemStore @relation(fields: [itemStoreId], references: [id])
  itemStoreId String    @db.VarChar(255)
  total       Int       @db.Integer
  user        user      @relation(fields: [userId], references: [id])
  userId      String    @db.VarChar(255)
  reatedAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model transactions {
  id          String    @id @unique @db.VarChar(255)
  total       Int       @db.Integer
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itemStore   itemStore @relation(fields: [itemStoreId], references: [id])
  itemStoreId String    @db.VarChar(255)
  user        user      @relation(fields: [userId], references: [id])
  userId      String    @db.VarChar(255)
  store       store     @relation(fields: [storesId], references: [id])
  storesId    String    @db.VarChar(255)

  @@map("transactions")
}
