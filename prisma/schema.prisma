// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id @unique @default(uuid()) @db.Uuid
  email        String         @unique @db.VarChar(255)
  fullName     String         @db.VarChar(200)
  images       String?        @db.VarChar(255)
  password     String         @db.VarChar(255)
  accessToken  String?        @db.VarChar(255)
  refreshToken String?        @db.VarChar(255)
  lastActive   DateTime?      @db.Timestamp()
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  rolesName    rolesUser      @default(user)
  address      address?       @relation(fields: [addressId], references: [id])
  addressId    String?        @db.Uuid
  wishList     wishList[]
  shoppingCart shoppingCart[]
  userAddress  userAddress[]

  @@map("customer_user")
}

model address {
  id          String        @id @unique @default(uuid()) @db.Uuid
  active      Boolean?      @db.Boolean
  jalan       String?       @db.VarChar(255)
  rt          String?       @db.VarChar(255)
  rw          String?       @db.VarChar(255)
  kodepos     String?       @db.VarChar(255)
  kelurahan   String?       @db.VarChar(255)
  kecamatan   String?       @db.VarChar(255)
  kota        String?       @db.VarChar(255)
  provinsi    String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        user[]
  userAddress userAddress[]

  @@map("customer_address")
}

model userAddress {
  addressId String  @db.Uuid
  userId    String  @db.Uuid
  address   address @relation(fields: [addressId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@id([addressId, userId])
  @@map("user_customer_address")
}

model wishList {
  itemStoreId String @db.Uuid
  userId      String @db.Uuid
  user        user   @relation(fields: [userId], references: [id])

  @@id([itemStoreId, userId])
  @@map("wishlist")
}

model shoppingCart {
  id             String         @id @unique @default(uuid()) @db.Uuid
  itemStoreId    String         @db.Uuid
  qty            Int            @db.Integer
  user           user           @relation(fields: [userId], references: [id])
  userId         String         @db.Uuid
  status_payment statusPayment? @default(UNPAID)
  order_id       String?        @db.VarChar(255)
  url_not_paid   String?        @db.VarChar(255)
  token_midtrans String?        @db.VarChar(255)
  reatedAt       DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shopping_cart_customer")
}

enum rolesUser {
  user
  super
}

enum statusPayment {
  SETTLEMENT
  PAID
  UNPAID
  CANCELLED
}
